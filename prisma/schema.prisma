// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid // UUID yang tersimpan sebagai UUID di PostgreSQL
  email     String     @unique
  password  String
  name      String
  decks     Deck[]
  progress  Progress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  History History[]
}

model Deck {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  category   String
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.Uuid
  flashcards Flashcard[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  History History[]
}

model Flashcard {
  id        String     @id @default(uuid()) @db.Uuid
  question  String
  answer    String
  imageUrl  String?
  deck      Deck       @relation(fields: [deckId], references: [id])
  deckId    String     @db.Uuid
  progress  Progress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  History History[]
}

model Progress {
  id          String    @id @default(uuid()) @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String    @db.Uuid
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model History {
  id          String    @id @default(uuid()) @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String    @db.Uuid
  deck        Deck      @relation(fields: [deckId], references: [id])
  deckId      String    @db.Uuid
  userAnswer  String
  isCorrect   Boolean
  status      String    // Status setelah menjawab (MASTERED/NEEDS_REVIEW)
  createdAt   DateTime  @default(now())
}